import arcade
import random
import os

# WIDTH = 560
WIDTH = 700
HEIGHT = 620
TITLE = "Pac-Man"
MOVEMENT_SPEED = 1
MAP_WIDTH = 28 * 20
MAP_HEIGHT = 31 * 20 - 10


class Map(arcade.Window):
    map = [
        "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
        "%............%%%............%",
        "%.%%%%.%%%%%.%%%.%%%%%.%%%%.%",
        "%.%%%%.%%%%%.%%%.%%%%%.%%%%.%",
        "%.%%%%.%%%%%.%%%.%%%%%.%%%%.%",
        "%...........................%",
        "%.%%%%.%%.%%%%%%%%%.%%.%%%%.%",
        "%.%%%%.%%.%%%%%%%%%.%%.%%%%.%",
        "%......%%....%%%....%%......%",
        "%%%%%%.%%%%%-%%%-%%%%%.%%%%%%",
        "-----%.%%%%%-%%%-%%%%%.%-----",
        "-----%.%%-----G-----%%.%-----",
        "-----%.%%-%%%%%%%%%-%%.%-----",
        "%%%%%%.%%-%-------%-%%.%%%%%%",
        "------.---%-------%---.------",
        "%%%%%%.%%-%-------%-%%.%%%%%%",
        "-----%.%%-%%%%%%%%%-%%.%-----",
        "-----%.%%-----------%%.%-----",
        "-----%.%%-%%%%%%%%%-%%.%-----",
        "%%%%%%.%%-%%%%%%%%%-%%.%%%%%%",
        "%............%%%............%",
        "%.%%%%.%%%%%.%%%.%%%%%.%%%%.%",
        "%.%%%%.%%%%%.%%%.%%%%%.%%%%.%",
        "%...%%........P........%%...%",
        "%%%.%%.%%.%%%%%%%%%.%%.%%.%%%",
        "%%%.%%.%%.%%%%%%%%%.%%.%%.%%%",
        "%......%%....%%%....%%......%",
        "%.%%%%%%%%%%.%%%.%%%%%%%%%%.%",
        "%.%%%%%%%%%%.%%%.%%%%%%%%%%.%",
        "%...........................%",
        "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
    ]

    def __init__(self, WIDTH, HEIGHT, TITLE):
        super().__init__(WIDTH, HEIGHT, TITLE)

        file_path = os.path.dirname(os.path.abspath(__file__))
        os.chdir(file_path)

        self.brick_list = arcade.SpriteList()
        self.food_list = arcade.SpriteList()
        self.player = Player()
        self.ghost = Ghost()
        self.end_game = False
        self.start_game = False

        self.setup()

    def setup(self):
        arcade.start_render()

        y = MAP_HEIGHT

        for row in Map.map:
            x = 10
            for element in row:
                if element == "%":
                    brick = arcade.Sprite("images/blue.png", center_x=x, center_y=y, scale=0.0385)
                    self.brick_list.append(brick)

                elif element == ".":
                    food = arcade.Sprite("images/food.png", center_x=x, center_y=y, scale=0.03)
                    self.food_list.append(food)
                elif element == "G":
                    self.ghost.center_x = x
                    self.ghost.center_y = y

                elif element == "P":
                    self.player.center_x = x
                    self.player.center_y = y
                    self.player.collision_check.center_x = x
                    self.player.collision_check.center_y = y

                x += 20
            y -= 20

    def on_draw(self):
        arcade.start_render()

        self.brick_list.draw()
        self.food_list.draw()

        if not self.start_game:
            arcade.draw_text(f"PAC-MAN", 260, 340, arcade.color.WHITE, 10, 100, font_name='GARA')
            arcade.draw_text("PRESS 'ENTER' KEY TO START", 243, 320, arcade.color.WHITE, 10, 110, font_name='GARA')
            arcade.draw_circle_filled(self.player.center_x, self.player.center_y, 8, arcade.color.YELLOW)

        if self.end_game:
            arcade.draw_text(f"GAME OVER! SCORE: {self.player.score}", 250, 335, arcade.color.WHITE, 10, 100,
                             font_name='GARA')

        if self.start_game:
            if self.player.mouth_open:
                self.player.draw()
            else:
                arcade.draw_circle_filled(self.player.center_x, self.player.center_y, 8, arcade.color.YELLOW)

        self.ghost.draw()

        arcade.draw_text(f"SCORE: {self.player.score}", 585, 595, arcade.color.WHITE, 15, 1, font_name='GARA')

    def update(self, delta_time):
        if self.start_game:
            self.brick_list.update()
            self.food_list.update()

            self.player.center_x += self.player.change_x
            self.player.center_y += self.player.change_y
            self.player.collision_check.center_x += self.player.change_x
            self.player.collision_check.center_y += self.player.change_y

            if self.player.direction == "U":
                self.player.front_collision.center_y = self.player.center_y + 2
                self.player.front_collision.center_x = self.player.center_x
            elif self.player.direction == "D":
                self.player.front_collision.center_y = self.player.center_y - 2
                self.player.front_collision.center_x = self.player.center_x
            elif self.player.direction == "L":
                self.player.front_collision.center_x = self.player.center_x - 2
                self.player.front_collision.center_y = self.player.center_y
            elif self.player.direction == "R":
                self.player.front_collision.center_x = self.player.center_x + 2
                self.player.front_collision.center_y = self.player.center_y

            if len(arcade.check_for_collision_with_list(self.player.front_collision, self.brick_list)) != 0:
                self.player.change_x = 0
                self.player.change_y = 0
                self.player.direction = ""

            if self.player.flag == "U":
                self.player.collision_check.center_y = self.player.center_y + 2
                self.player.collision_check.center_x = self.player.center_x
                if len(arcade.check_for_collision_with_list(self.player.collision_check, self.brick_list)) == 0:
                    self.player.direction = "U"
                    self.player.flag = ""
            elif self.player.flag == "D":
                self.player.collision_check.center_y = self.player.center_y - 2
                self.player.collision_check.center_x = self.player.center_x
                if len(arcade.check_for_collision_with_list(self.player.collision_check, self.brick_list)) == 0:
                    self.player.direction = "D"
                    self.player.flag = ""
            elif self.player.flag == "L":
                self.player.collision_check.center_x = self.player.center_x - 2
                self.player.collision_check.center_y = self.player.center_y
                if len(arcade.check_for_collision_with_list(self.player.collision_check, self.brick_list)) == 0:
                    self.player.direction = "L"
                    self.player.flag = ""
            elif self.player.flag == "R":
                self.player.collision_check.center_x = self.player.center_x + 2
                self.player.collision_check.center_y = self.player.center_y
                if len(arcade.check_for_collision_with_list(self.player.collision_check, self.brick_list)) == 0:
                    self.player.direction = "R"
                    self.player.flag = ""

            self.move_player()

            self.ghost.center_x += self.ghost.change_x
            self.ghost.center_y += self.ghost.change_y
            self.ghost.up_collision.center_x += self.ghost.change_x
            self.ghost.up_collision.center_y += self.ghost.change_y
            self.ghost.left_collision.center_x += self.ghost.change_x
            self.ghost.left_collision.center_y += self.ghost.change_y
            self.ghost.down_collision.center_x += self.ghost.change_x
            self.ghost.down_collision.center_y += self.ghost.change_y
            self.ghost.right_collision.center_x += self.ghost.change_x
            self.ghost.right_collision.center_y += self.ghost.change_y

            self.ghost.next_step(self.brick_list, self.player)

            if arcade.check_for_collision(self.ghost, self.player):
                self.end_game = True
                self.player.direction = ""
                self.player.change_x = 0
                self.player.change_y = 0

            if len(self.food_list) == 0:
                self.end_game = True
                self.player.direction = ""
                self.player.change_x = 0
                self.player.change_y = 0

            food_hit_list = arcade.check_for_collision_with_list(self.player, self.food_list)
            for food in food_hit_list:
                food.kill()
                self.player.score += 1

            if self.player.center_x > 0 and self.player.center_x < 10:
                if self.player.center_y < 335 and self.player.center_y > 325:
                    self.player.center_x, self.player.center_y = 570, 330
            elif self.player.center_x < 580 and self.player.center_x > 570:
                if self.player.center_y < 335 and self.player.center_y > 325:
                    self.player.center_x, self.player.center_y = 10, 330

    def move_player(self):
        if self.player.direction == "U":
            self.player.angle = 90
            self.player.change_y = MOVEMENT_SPEED
            self.player.change_x = 0
            self.player.collision_check.change_y = MOVEMENT_SPEED
            self.player.collision_check.change_x = 0

        elif self.player.direction == "D":
            self.player.angle = 270
            self.player.change_y = -MOVEMENT_SPEED
            self.player.change_x = 0
            self.player.collision_check.change_y = -MOVEMENT_SPEED
            self.player.collision_check.change_x = 0

        elif self.player.direction == "L":
            self.player.angle = 180
            self.player.change_x = -MOVEMENT_SPEED
            self.player.change_y = 0
            self.player.collision_check.change_x = -MOVEMENT_SPEED
            self.player.collision_check.change_y = 0

        elif self.player.direction == "R":
            self.player.angle = 0
            self.player.change_x = MOVEMENT_SPEED
            self.player.change_y = 0
            self.player.collision_check.change_x = MOVEMENT_SPEED
            self.player.collision_check.change_y = 0

    def on_key_press(self, key, modifiers):
        if key == arcade.key.ENTER:
            self.start_game = True

        if self.start_game:
            if key == arcade.key.UP:
                self.player.flag = "U"
            elif key == arcade.key.DOWN:
                self.player.flag = "D"
            elif key == arcade.key.LEFT:
                self.player.flag = "L"
            elif key == arcade.key.RIGHT:
                self.player.flag = "R"

class Player(arcade.Sprite):
    def __init__(self, filename="images/pacman.png", scale=0.1):
        super().__init__(filename=filename, scale=scale)
        self.collision_check = arcade.Sprite(filename="images/pacman.png", scale=0.11)
        self.front_collision = arcade.Sprite(filename="images/pacman.png", scale=0.1)
        self.flag = ""
        self.direction = ""
        self.score = 0
        self.mouth_open = False
        arcade.schedule(self.eat, 0.2)

    def eat(self, delta_time):
        if self.change_x == 0 and self.change_y == 0:
            self.mouth_open = False
        else:
            if self.mouth_open:
                self.mouth_open = False
            else:
                self.mouth_open = True

class Ghost(arcade.Sprite):
    def __init__(self, filename="images/ghost.png", scale=0.03):
        super().__init__(filename=filename, scale=scale)

        self.up_collision = arcade.Sprite(filename="images/ghost.png", scale=0.03)
        self.left_collision = arcade.Sprite(filename="images/ghost.png", scale=0.03)
        self.right_collision = arcade.Sprite(filename="images/ghost.png", scale=0.03)
        self.down_collision = arcade.Sprite(filename="images/ghost.png", scale=0.03)
        self.collision_list = arcade.SpriteList()
        self.collision_list.append(self.up_collision)
        self.collision_list.append(self.left_collision)
        self.collision_list.append(self.down_collision)
        self.collision_list.append(self.right_collision)
        self.available_direction = ["U", "L", "D", "R"]  # 0, 1, 2, 3

        start_direction = random.randint(0, 1)
        if start_direction == 0:
            self.flag = 1
        else:
            self.flag = 3

        self.preferred_direction = ["", ""]
        self.player_distance_x = 0
        self.player_distance_y = 0

    def next_step(self, brick_list, player):
        pass
        """
        if self.flag == "":
            clear = True
            while clear:
                index = random.randint(0, 3)
                if index == 0:
                    if len(arcade.check_for_collision_with_list(self.collision_list[index], brick_list)) == 0:
                        self.flag = self.available_direction[index]
                        clear = False
                elif index == 1:
                    if len(arcade.check_for_collision_with_list(self.collision_list[index], brick_list)) == 0:
                        self.flag = self.available_direction[index]
                        clear = False
                elif index == 2:
                    if len(arcade.check_for_collision_with_list(self.collision_list[index], brick_list)) == 0:
                        self.flag = self.available_direction[index]
                        clear = False
                elif index == 3:
                    if len(arcade.check_for_collision_with_list(self.collision_list[index], brick_list)) == 0:
                        self.flag = self.available_direction[index]
                        clear = False
        
        if self.flag == "U":
            collision = self.collision_list[self.direction]
            if len(arcade.check_for_collision_with_list(collision, brick_list)) == 0:
                self.direction = 0
                #self.index = 0
                self.flag = ""
        elif self.flag == "D":
            collision = self.collision_list[self.index]
            if len(arcade.check_for_collision_with_list(collision, brick_list)) == 0:
                self.direction = 2
                #self.index = 2
                self.flag = ""
        elif self.flag == "L":
            collision = self.collision_list[self.index]
            if len(arcade.check_for_collision_with_list(collision, brick_list)) == 0:
                self.direction = 1
                #self.index = 1
                self.flag = ""
        elif self.flag == "R":
            collision = self.collision_list.get[self.index]
            if len(arcade.check_for_collision_with_list(self.front_collision_check, brick_list)) == 0:
                self.direction = 3
                #self.index = 3
                self.flag = ""


        if self.direction == 0:
            self.up_collision.center_y = self.center_y + 2
            self.up_collision.center_x = self.center_x
            self.left_collision.center_y = self.center_y
            self.left_collision.center_x = self.center_x - 2
            self.right_collision.center_y = self.center_y
            self.right_collision.center_x = self.center_x + 2
            self.down_collision.center_y = self.center_y - 2
            self.down_collision.center_x = self.center_x

        elif self.direction == 2:
            self.up_collision.center_y = self.center_y - 2
            self.up_collision.center_x = self.center_x
            self.left_collision.center_y = self.center_y
            self.left_collision.center_x = self.center_x - 2
            self.right_collision.center_y = self.center_y
            self.right_collision.center_x = self.center_x + 2
            self.down_collision.center_y = self.center_y + 2
            self.down_collision.center_x = self.center_x

        elif self.direction == 1:
            self.up_collision.center_x = self.center_x - 2
            self.up_collision.center_y = self.center_y
            self.left_collision.center_y = self.center_y - 2
            self.left_collision.center_x = self.center_x
            self.right_collision.center_y = self.center_y + 2
            self.right_collision.center_x = self.center_x
            self.down_collision.center_y = self.center_y
            self.down_collision.center_x = self.center_x + 2

        elif self.direction == 3:
            self.up_collision.center_x = self.center_x + 2
            self.up_collision.center_y = self.center_y
            self.left_collision.center_y = self.center_y - 2
            self.left_collision.center_x = self.center_x
            self.right_collision.center_y = self.center_y + 2
            self.right_collision.center_x = self.center_x
            self.down_collision.center_y = self.center_y
            self.down_collision.center_x = self.center_x - 2

        if len(arcade.check_for_collision_with_list(self.collision_list[self.direction], brick_list)) != 0:
            self.change_x = 0
            self.change_y = 0
            self.direction = 4
            self.flag = ""

        
        self.move()

        
        if self.change_x == 0 and self.change_y == 0:
            self.get_direction(player)
            self.check_collision(brick_list)

            direction = self.available_direction[random.randint(0, len(self.available_direction)-1)]
            if direction == "U":
                self.direction = "U"
            elif direction == "D":
                self.direction = "D"
            elif direction == "R":
                self.direction = "R"
            elif direction == "L":
                self.direction = "L"



            if self.preferred_direction[0] == "R":
                if self.move_right:
                    self.direction = "R"
                elif self.preferred_direction[1] == "U":
                    if self.move_up:
                        self.flag = "U"
                    elif self.move_down:
                        self.flag = "D"
                    elif self.move_left:
                        self.flag = "L"
                elif self.preferred_direction[1] == "D":
                    if self.move_down:
                        self.flag = "D"
                    elif self.move_up:
                        self.flag = "U"
                    elif self.move_left:
                        self.flag = "L"

            elif self.preferred_direction[0] == "L":
                if self.move_left:
                    self.flag = "L"
                elif self.preferred_direction[1] == "U":
                    if self.move_up:
                        self.flag = "U"
                    elif self.move_down:
                        self.flag = "D"
                    elif self.move_right:
                        self.flag = "R"
                elif self.preferred_direction[1] == "D":
                    if self.move_down:
                        self.flag = "D"
                    elif self.move_up:
                        self.flag = "U"
                    elif self.move_right:
                        self.flag = "R"

            if self.flag == "R":
                self.direction = "R"
            elif self.flag == "L":
                self.direction = "L"
            elif self.flag == "U":
                self.direction = "U"
            elif self.flag == "D":
                self.direction = "D"
            

    def get_direction(self, player):
        self.player_distance_x = self.center_x - player.center_x
        self.player_distance_y = self.center_y - player.center_y

        if self.player_distance_x > 0:
            self.preferred_direction[0] = "L"
        elif self.player_distance_x < 0:
            self.preferred_direction[0] = "R"

        if self.player_distance_y > 0:
            self.preferred_direction[1] = "D"
        elif self.player_distance_y < 0:
            self.preferred_direction[1] = "U"

    
    def check_collision(self, brick_list):
        #R
        self.collision_check.center_x = self.center_x + 2
        self.collision_check.center_y = self.center_y
        if len(arcade.check_for_collision_with_list(self.collision_check, brick_list)) == 0:
            if not self.available_direction.__contains__("R"):
                self.available_direction.append("R")
        else:
            if self.available_direction.__contains__("R"):
                self.available_direction.remove("R")
        #L
        self.collision_check.center_x = self.center_x - 2
        if len(arcade.check_for_collision_with_list(self.collision_check, brick_list)) == 0:
            if not self.available_direction.__contains__("L"):
                self.available_direction.append("L")
        else:
            if self.available_direction.__contains__("L"):
                self.available_direction.remove("L")
        #U
        self.collision_check.center_y = self.center_y + 2
        self.collision_check.center_x = self.center_x
        if len(arcade.check_for_collision_with_list(self.collision_check, brick_list)) == 0:
            if not self.available_direction.__contains__("U"):
                self.available_direction.append("U")
            else:
                if self.available_direction.__contains__("U"):
                    self.available_direction.remove("U")
        #D
        self.collision_check.center_y = self.center_y - 2
        if len(arcade.check_for_collision_with_list(self.collision_check, brick_list)) == 0:
            if not self.available_direction.__contains__("D"):
                self.available_direction.append("D")
            else:
                if self.available_direction.__contains__("D"):
                    self.available_direction.remove("D")"""

    def move(self):
        if self.direction == "U":
            self.change_y = MOVEMENT_SPEED
            self.change_x = 0
            self.up_collision.change_y = MOVEMENT_SPEED
            self.up_collision.change_x = 0
            self.left_collision.change_y = MOVEMENT_SPEED
            self.left_collision.change_x = 0
            self.right_collision.change_y = MOVEMENT_SPEED
            self.right_collision.change_x = 0
            self.down_collision.change_y = MOVEMENT_SPEED
            self.down_collision.change_x = 0

        elif self.direction == "D":
            self.change_y = -MOVEMENT_SPEED
            self.change_x = 0
            self.up_collision.change_y = -MOVEMENT_SPEED
            self.up_collision.change_x = 0
            self.left_collision.change_y = -MOVEMENT_SPEED
            self.left_collision.change_x = 0
            self.right_collision.change_y = -MOVEMENT_SPEED
            self.right_collision.change_x = 0
            self.down_collision.change_y = -MOVEMENT_SPEED
            self.down_collision.change_x = 0

        elif self.direction == "L":
            self.change_x = -MOVEMENT_SPEED
            self.change_y = 0
            self.up_collision.change_x = -MOVEMENT_SPEED
            self.up_collision.change_y = 0
            self.left_collision.change_x = -MOVEMENT_SPEED
            self.left_collision.change_y = 0
            self.right_collision.change_x = -MOVEMENT_SPEED
            self.right_collision.change_y = 0
            self.down_collision.change_x = -MOVEMENT_SPEED
            self.down_collision.change_y = 0

        elif self.direction == "R":
            self.change_x = MOVEMENT_SPEED
            self.change_y = 0
            self.up_collision.change_x = MOVEMENT_SPEED
            self.up_collision.change_y = 0
            self.left_collision.change_x = MOVEMENT_SPEED
            self.left_collision.change_y = 0
            self.right_collision.change_x = MOVEMENT_SPEED
            self.right_collision.change_y = 0
            self.down_collision.change_x = MOVEMENT_SPEED
            self.down_collision.change_y = 0


class MyGame():
    def __init__(self):
        super().__init__()
        self.map = Map(WIDTH, HEIGHT, TITLE)

    # def update(self, delta_time):
    #    if self.start_game:
    #        self.map = Map(WIDTH, HEIGHT, TITLE)

    # def on_draw(self):
    #    if not self.start_game:
    #        arcade.start_render()
    #        arcade.set_background_color(arcade.color.BLUE)

    # def on_key_press(self, key, modifiers):
    #    if key == arcade.key.ENTER:
    #        self.start_game = True


def main():
    MyGame()
    arcade.run()


if __name__ == '__main__':
    main()
